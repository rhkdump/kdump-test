#!/bin/bash

KDUMP_TEST_ENV="/var/kdump/.kdump_test"
KDUMP_TEST_PREFIX="kdump_test_"
MKDUMPRD_TMPMNT="/var/kdump/tmp_mnt"
KDUMP_TEST_SUCCESS_CHECKSUM="/var/kdump/kdump_test_checksum"
DEV_KMSG="/dev/kmsg"
DEFAULT_SSHKEY="/root/.ssh/kdump_id_rsa"
CURRENT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd -P)

. /usr/lib/kdump/kdump-lib.sh
. /usr/lib/dracut/dracut-logger.sh
[[ -f "$CURRENT_DIR"/README ]] && source "$CURRENT_DIR"/kdump-test-lib.sh

dlog_init

declare -A OPT

kdump_do_test()
{
	local _TEST_ID="$KDUMP_TEST_PREFIX""$(date +%Y-%m-%d-%T)"

	determine_dump_mode
	is_kernel_loaded "$DEFAULT_DUMP_MODE"

	if [[ $? -eq 1 ]]; then
		echo "Kdump should be enabled before testing"
		exit 1
	fi

	if [[ ! -c "$DEV_KMSG" ]]; then
		echo "$DEV_KMSG not exist, cannot proceed the test"
		exit 1
	fi

	kdumpctl restart 2> /dev/null
	if [[ $? -ne 0 ]]; then
		echo "kdumpctl restart failed"
		exit 1
	fi

	[[ ! -d $(dirname "$KDUMP_TEST_ENV") ]] && mkdir -p $(dirname "$KDUMP_TEST_ENV")
	echo "$_TEST_ID " > "$KDUMP_TEST_ENV"
	echo "$_TEST_ID" > "$DEV_KMSG"

	sync
	echo c > /proc/sysrq-trigger
}

# $1: function name with ()
# $2: file path
# $3: function to modify the copied function
source_function_from_file()
{
	local start_line_num function_source
	local func=$3

	start_line_num=$(grep -n "$1" "$2" | cut -d: -f1)
	[[ -z "$start_line_num" ]] && return 1
	function_source=$(tail -n +"$start_line_num" "$2"|sed -n "/$1/,/^}/p")
	[[ -z "$function_source" ]] && return 1

	if [[ -n "$func" ]]; then
		function_source=$("$func" "$function_source")
	fi
	eval "$function_source"
}

# $1: variable name
# $2: file path
source_variable_from_file()
{
	local line_num line_source

	line_num=$(grep -n "^$1=" "$2" | cut -d: -f1)
	[[ -z "$line_num" ]] && return 1
	line_source=$(sed -n "$line_num p" "$2")
	[[ -z "$line_source" ]] && return 1

	eval "$line_source"
}

is_fs_dump_target()
{
	[ -n "$(kdump_get_conf_val "ext[234]\|xfs\|btrfs\|minix\|virtiofs")" ]
}

# $1: dump target
# $2: dump path
# $3: kdump test id string
kdump_test_check_id()
{
	local _path=$2 _id_str=$3
	local kexec_dmesg_file=$(find "$_path" -name "vmcore-dmesg.txt" -exec grep -l "$_id_str" {} +)

	if [ -n "$kexec_dmesg_file" ]; then
		return 0
	else
		return 1
	fi
}

get_ssh_key_location()
{
	keyfile=$(kdump_get_conf_val sshkey)
	if [[ -f $keyfile ]]; then
		SSH_KEY_LOCATION=$(/usr/bin/readlink -m "$keyfile")
	fi
}

kdump_test_ssh_check_id()
{
	local kexec_dmesg_file
	local _opt _target=$1 _path=$2 _id_str=$3

	get_ssh_key_location
	_opt=(-i "$SSH_KEY_LOCATION" -o BatchMode=yes -o StrictHostKeyChecking=yes)
	kexec_dmesg_file=$(ssh -qn "${_opt[@]}" "$_target" find "$_path" -name "vmcore-dmesg.txt" -exec grep -l "$_id_str" {} +)

	if [ -n "$kexec_dmesg_file" ]; then
		return 0
	else
		return 1
	fi
}

kdump_test_check_target()
{
	local _test_id _conf_checksum

	_test_id=$(cat "$KDUMP_TEST_ENV" 2>/dev/null)
	_conf_checksum=$(get_all_kdump_conf checksum_conf)

	if [[ ! -f "$KDUMP_TEST_ENV" || -z "$_test_id" ]]; then
		# We are not running "kdumpctl test-check" the 1st time, so no
		# need to recheck the test dmesg logs, just check if kdump conf
		# is changed, it is much faster
		if [[ -f "$KDUMP_TEST_SUCCESS_CHECKSUM" && "$_conf_checksum" == $(cat "$KDUMP_TEST_SUCCESS_CHECKSUM" | tr -s ' ' | cut -d ' ' -f 2) ]]; then
			echo "kdump test successful!"
		else
			echo "Need kdump test, please run \"kdump-test test\" first!"
		fi
		return
	fi

	if is_fs_dump_target || is_nfs_dump_target;  then
		check_user_configured_target "${OPT[_target]}" "${OPT[_fstype]}" kdump_test_check_id "$_test_id"
	elif is_ssh_dump_target; then
		kdump_test_ssh_check_id "${OPT[_target]}" "${OPT[path]}" "$_test_id"
	elif is_raw_dump_target; then
		echo "Kdump test is not supported for raw dump target."
		return
	else
		handle_default_dump_target kdump_test_check_id "$_test_id"
	fi

	# We are running "kdump-test test-check" the 1st time, so check the test
	# dmesg logs and refresh kdump conf checksum if the checking is successful
	if [[ $? -eq 0 ]]; then
		echo "$_test_id $_conf_checksum" > "$KDUMP_TEST_SUCCESS_CHECKSUM"
		echo "kdump test successful!"
	else
		echo "kdump test failed!"
	fi

	rm -f "$KDUMP_TEST_ENV"
}

checksum_conf()
{
	local -n conf=$1

	for _key in "${!conf[@]}"; do
		echo "$_key ${conf[$_key]} "
	done | sort | md5sum | cut -d' ' -f1
}

output_conf()
{
	local -n conf=$1
	local _width _max_width=0 _line_width _elem _key

	for _elem in "${!conf[@]}"; do
		_width=${#_elem}
		if (( _width > _max_width )); then
			_max_width=$_width
		fi
	done
	_line_width=$_max_width
	_max_width=0
	for _elem in "${conf[@]}"; do
		_width=${#_elem}
		if (( _width > _max_width )); then
			_max_width=$_width
		fi
	done
	_line_width=$((_line_width + _max_width))

	echo -e "\nCurrent kdump configuration:"
	printf -- '-%.0s' $(seq -s " " $((_line_width + 1))); echo
	for _key in "${!conf[@]}"; do
		printf "%-$(( _line_width - _max_width ))s %s\n" "$_key" "${conf[$_key]}"
	done | sort
	printf -- '-%.0s' $(seq -s " " $((_line_width + 1))); echo
}

# $1: callback function
get_all_kdump_conf()
{
	local _max_width=0 _width _elem _line_width _key _func=$1
	declare -A kdump_conf

	for _elem in "${!OPT[@]}"; do
		kdump_conf["$_elem"]="${OPT[$_elem]}"
	done

	determine_dump_mode
	if [[ "$DEFAULT_DUMP_MODE" == "kdump" || "$DEFAULT_DUMP_MODE" == "fadump" ]]; then
		kdump_conf["crashkernel_size"]="$(($(get_reserved_mem_size) / 1024 / 1024))M"
		kdump_conf["dump_mode"]="$DEFAULT_DUMP_MODE"
	else
		return
	fi

	$_func kdump_conf
}

# $1: source code of check_user_configured_target()
modify_handle_default_dump_target()
{
	printf "%s" "$1" \
	 | sed '/add_mount "$_target"/d' \
	 | sed 's/check_size fs.*/$_func "$_target" "$_save_path" $@/' \
	 | sed 's/local _mntpoint.*/local _mntpoint\n\tlocal _func=$1 \&\& shift 1/'
}

# $1: source code of handle_default_dump_target()
modify_check_user_configured_target()
{
	printf "%s" "$1" \
	 | sed 's/check_size fs.*/func=$3 \&\& shift 3\n\t$func "$_target" "$_mnt\/$SAVE_PATH" $@\n\t_ret=$?/g' \
	 | sed 's/^}/\treturn $_ret\n}/'
}

import_functions()
{
	local functions_need_imported=()
	functions_need_imported+=("/usr/sbin/mkdumprd check_user_configured_target() modify_check_user_configured_target")
	functions_need_imported+=("/usr/sbin/mkdumprd handle_default_dump_target() modify_handle_default_dump_target")
	functions_need_imported+=("/usr/sbin/mkdumprd check_save_path_fs()")
	functions_need_imported+=("/usr/bin/kdumpctl determine_dump_mode()")

	for f in "${functions_need_imported[@]}"; do
		set -- $f
		source_function_from_file "$2" "$1" "$3"
		if [[ $? -ne 0 ]]; then
			echo "Import \"$1:$2\" error!" && exit 1
		fi
	done
}

import_variables()
{
	local variables_need_imported=()
	variables_need_imported+=("/usr/sbin/mkdumprd SAVE_PATH")
	variables_need_imported+=("/usr/sbin/mkdumprd SSH_KEY_LOCATION")
	variables_need_imported+=("/usr/bin/kdumpctl DEFAULT_DUMP_MODE")

	for v in "${variables_need_imported[@]}"; do
		set -- $v
		source_variable_from_file "$2" "$1"
		if [[ $? -ne 0 ]]; then
			echo "Import \"$1:$2\" error!" && exit 1
		fi
	done
}

main()
{
	kexec_tools_installed=$(rpm -q kexec-tools)

	if [[ -z "$kexec_tools_installed" ]]; then
		echo "kexec-tools not installed!"
		exit 1
	fi

	import_functions
	import_variables
	parse_config
	
	case "$1" in
	test)
		kdump_do_test
		;;
	test-check)
		kdump_test_check_target
		;;
	conf-list)
		get_all_kdump_conf output_conf
		;;
	*)
		echo "Usage: $0 {test|test-check|conf-list}"
		exit 1
		;;
	esac
}

main "$@"
